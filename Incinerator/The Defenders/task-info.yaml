type: checkiO
files:
- name: mission.py
  visible: true
  text: "if __name__ == '__main__':\n    #These \"asserts\" using only for self-checking\
    \ and not necessary for auto-testing\n    \n    #fight tests\n    chuck = Warrior()\n\
    \    bruce = Warrior()\n    carl = Knight()\n    dave = Warrior()\n    mark =\
    \ Warrior()\n    bob = Defender()\n    mike = Knight()\n    rog = Warrior()\n\
    \    lancelot = Defender()\n\n    assert fight(chuck, bruce) == True\n    assert\
    \ fight(dave, carl) == False\n    assert chuck.is_alive == True\n    assert bruce.is_alive\
    \ == False\n    assert carl.is_alive == True\n    assert dave.is_alive == False\n\
    \    assert fight(carl, mark) == False\n    assert carl.is_alive == False\n  \
    \  assert fight(bob, mike) == False\n    assert fight(lancelot, rog) == True\n\
    \n    #battle tests\n    my_army = Army()\n    my_army.add_units(Defender, 1)\n\
    \    \n    enemy_army = Army()\n    enemy_army.add_units(Warrior, 2)\n\n    army_3\
    \ = Army()\n    army_3.add_units(Warrior, 1)\n    army_3.add_units(Defender, 1)\n\
    \n    army_4 = Army()\n    army_4.add_units(Warrior, 2)\n\n    battle = Battle()\n\
    \n    assert battle.fight(my_army, enemy_army) == False\n    assert battle.fight(army_3,\
    \ army_4) == True\n    print(\"Coding complete? Let's try tests!\")\n"
  learner_created: false
status: Unchecked
code: "if __name__ == '__main__':\n    #These \"asserts\" using only for self-checking\
  \ and not necessary for auto-testing\n    \n    #fight tests\n    chuck = Warrior()\n\
  \    bruce = Warrior()\n    carl = Knight()\n    dave = Warrior()\n    mark = Warrior()\n\
  \    bob = Defender()\n    mike = Knight()\n    rog = Warrior()\n    lancelot =\
  \ Defender()\n\n    assert fight(chuck, bruce) == True\n    assert fight(dave, carl)\
  \ == False\n    assert chuck.is_alive == True\n    assert bruce.is_alive == False\n\
  \    assert carl.is_alive == True\n    assert dave.is_alive == False\n    assert\
  \ fight(carl, mark) == False\n    assert carl.is_alive == False\n    assert fight(bob,\
  \ mike) == False\n    assert fight(lancelot, rog) == True\n\n    #battle tests\n\
  \    my_army = Army()\n    my_army.add_units(Defender, 1)\n    \n    enemy_army\
  \ = Army()\n    enemy_army.add_units(Warrior, 2)\n\n    army_3 = Army()\n    army_3.add_units(Warrior,\
  \ 1)\n    army_3.add_units(Defender, 1)\n\n    army_4 = Army()\n    army_4.add_units(Warrior,\
  \ 2)\n\n    battle = Battle()\n\n    assert battle.fight(my_army, enemy_army) ==\
  \ False\n    assert battle.fight(army_3, army_4) == True\n    print(\"Coding complete?\
  \ Let's try tests!\")\n"
seconds_from_change: 9223372036854775807
